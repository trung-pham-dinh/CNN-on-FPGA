#*****************************************************************************************
# Vivado (TM) v2021.1 (64-bit)
#
# CNN_FPGA.tcl: Tcl script for re-creating project 'CNN_FPGA'
#
# Generated by Vivado on Mon Jan 24 08:32:20 +0700 2022
# IP Build 3246043 on Fri Jun 11 00:30:35 MDT 2021
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (CNN_FPGA.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/CNN_FPGA/CNN_FPGA.srcs/sources_1/ip/mult_gen_0/mult_gen_0.xci"
#
# 3. The following remote source files that were added to the original project:-
#
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/load_weight.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/pipeline.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/load_weight_ctrl.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/pcore.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/pe.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/pmul.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/computing_core.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/in_addr_gen.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/load_activation.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/bd/Convo_core/hdl/Convo_core_wrapper.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/out_addr_gen.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/BRAM_init.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/accumulator.v"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/bram_init/weight0_0.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/bram_init/weight0_1.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/bram_init/weight0_2.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/bram_init/image0.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/bram_init/weight0_3.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/program/bram_weight_init/bram_weight_init_0.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/program/bram_weight_init/bram_weight_init_1.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/program/bram_weight_init/bram_weight_init_2.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/program/bram_weight_init/bram_weight_init_3.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/program/bram_input_init/bram_input_init_0.coe"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/buid/PYNQ-Z2 v1.0.xdc"
#    "D:/Documents/Xilinx/CNN_FPGA/Vivado/src/sim/Convo_core_sim.v"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/CNN_FPGA/CNN_FPGA.srcs/sources_1/ip/mult_gen_0/mult_gen_0.xci"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set files [list \
 "[file normalize "$origin_dir/src/hdl/load_weight.v"]"\
 "[file normalize "$origin_dir/src/hdl/pipeline.v"]"\
 "[file normalize "$origin_dir/src/hdl/load_weight_ctrl.v"]"\
 "[file normalize "$origin_dir/src/hdl/pcore.v"]"\
 "[file normalize "$origin_dir/src/hdl/pe.v"]"\
 "[file normalize "$origin_dir/src/hdl/pmul.v"]"\
 "[file normalize "$origin_dir/src/hdl/computing_core.v"]"\
 "[file normalize "$origin_dir/src/hdl/in_addr_gen.v"]"\
 "[file normalize "$origin_dir/src/hdl/load_activation.v"]"\
 "[file normalize "$origin_dir/src/bd/Convo_core/hdl/Convo_core_wrapper.v"]"\
 "[file normalize "$origin_dir/src/hdl/out_addr_gen.v"]"\
 "[file normalize "$origin_dir/BRAM_init.coe"]"\
 "[file normalize "$origin_dir/src/hdl/accumulator.v"]"\
 "[file normalize "$origin_dir/bram_init/weight0_0.coe"]"\
 "[file normalize "$origin_dir/bram_init/weight0_1.coe"]"\
 "[file normalize "$origin_dir/bram_init/weight0_2.coe"]"\
 "[file normalize "$origin_dir/bram_init/image0.coe"]"\
 "[file normalize "$origin_dir/bram_init/weight0_3.coe"]"\
 "[file normalize "$origin_dir/src/program/bram_weight_init/bram_weight_init_0.coe"]"\
 "[file normalize "$origin_dir/src/program/bram_weight_init/bram_weight_init_1.coe"]"\
 "[file normalize "$origin_dir/src/program/bram_weight_init/bram_weight_init_2.coe"]"\
 "[file normalize "$origin_dir/src/program/bram_weight_init/bram_weight_init_3.coe"]"\
 "[file normalize "$origin_dir/src/program/bram_input_init/bram_input_init_0.coe"]"\
 "[file normalize "$origin_dir/src/buid/PYNQ-Z2 v1.0.xdc"]"\
 "[file normalize "$origin_dir/src/sim/Convo_core_sim.v"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  set paths [list \
 "[file normalize "$origin_dir/[file normalize "$origin_dir/ip_repo/myip_1.0"]"]"\
 "[file normalize "$origin_dir/[file normalize "$origin_dir/ip_repo/pmul_AXI_1.0"]"]"\
 "[file normalize "$origin_dir/[file normalize "$origin_dir/ip_repo/ConvoFIFO_uut_AXI_1.0"]"]"\
 "[file normalize "$origin_dir/[file normalize "$origin_dir/ip_repo/testPackageIP_1.0"]"]"\
  ]
  foreach ipath $paths {
    if { ![file isdirectory $ipath] } {
      puts " Could not access $ipath "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "CNN_FPGA"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "CNN_FPGA.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/CNN_FPGA"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7z020clg400-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part_repo_paths" -value "C:/Users/fhdtr/AppData/Roaming/Xilinx/Vivado/2021.1/xhub/board_store/xilinx_board_store" -objects $obj
set_property -name "board_part" -value "tul.com.tw:pynq-z2:part0:1.0" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "ultra96v2" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "71" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "71" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "71" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "71" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "71" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "71" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "71" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "464" -objects $obj
set_property -name "xpm_libraries" -value "XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/ip_repo/myip_1.0"] [file normalize "$origin_dir/ip_repo/pmul_AXI_1.0"] [file normalize "$origin_dir/ip_repo/ConvoFIFO_uut_AXI_1.0"] [file normalize "$origin_dir/ip_repo/testPackageIP_1.0"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/src/hdl/load_weight.v"] \
 [file normalize "${origin_dir}/src/hdl/pipeline.v"] \
 [file normalize "${origin_dir}/src/hdl/load_weight_ctrl.v"] \
 [file normalize "${origin_dir}/src/hdl/pcore.v"] \
 [file normalize "${origin_dir}/src/hdl/pe.v"] \
 [file normalize "${origin_dir}/src/hdl/pmul.v"] \
 [file normalize "${origin_dir}/src/hdl/computing_core.v"] \
 [file normalize "${origin_dir}/src/hdl/in_addr_gen.v"] \
 [file normalize "${origin_dir}/src/hdl/load_activation.v"] \
 [file normalize "${origin_dir}/src/bd/Convo_core/hdl/Convo_core_wrapper.v"] \
 [file normalize "${origin_dir}/src/hdl/out_addr_gen.v"] \
 [file normalize "${origin_dir}/BRAM_init.coe"] \
 [file normalize "${origin_dir}/src/hdl/accumulator.v"] \
 [file normalize "${origin_dir}/bram_init/weight0_0.coe"] \
 [file normalize "${origin_dir}/bram_init/weight0_1.coe"] \
 [file normalize "${origin_dir}/bram_init/weight0_2.coe"] \
 [file normalize "${origin_dir}/bram_init/image0.coe"] \
 [file normalize "${origin_dir}/bram_init/weight0_3.coe"] \
 [file normalize "${origin_dir}/src/program/bram_weight_init/bram_weight_init_0.coe"] \
 [file normalize "${origin_dir}/src/program/bram_weight_init/bram_weight_init_1.coe"] \
 [file normalize "${origin_dir}/src/program/bram_weight_init/bram_weight_init_2.coe"] \
 [file normalize "${origin_dir}/src/program/bram_weight_init/bram_weight_init_3.coe"] \
 [file normalize "${origin_dir}/src/program/bram_input_init/bram_input_init_0.coe"] \
]
add_files -norecurse -fileset $obj $files

# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/CNN_FPGA/CNN_FPGA.srcs/sources_1/ip/mult_gen_0/mult_gen_0.xci" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "mult_gen_0/mult_gen_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "Convo_core_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/src/buid/PYNQ-Z2 v1.0.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/src/buid/PYNQ-Z2 v1.0.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/src/sim/Convo_core_sim.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "nl.mode" -value "funcsim" -objects $obj
set_property -name "top" -value "Convo_core_sim" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files load_weight.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/load_weight.v
}
if { [get_files pipeline.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/pipeline.v
}
if { [get_files load_weight_ctrl.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/load_weight_ctrl.v
}
if { [get_files mult_gen_0.xci] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/CNN_FPGA/CNN_FPGA.srcs/sources_1/ip/mult_gen_0/mult_gen_0.xci
}
if { [get_files pcore.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/pcore.v
}
if { [get_files pe.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/pe.v
}
if { [get_files pmul.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/pmul.v
}
if { [get_files computing_core.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/computing_core.v
}
if { [get_files in_addr_gen.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/in_addr_gen.v
}
if { [get_files load_activation.v] == "" } {
  import_files -quiet -fileset sources_1 D:/Documents/Xilinx/CNN_FPGA/Vivado/src/hdl/load_activation.v
}


# Proc to create BD Convo_core
proc cr_bd_Convo_core { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# computing_core, load_activation, load_weight, load_weight_ctrl, pipeline



  # CHANGE DESIGN NAME HERE
  set design_name Convo_core

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:blk_mem_gen:8.4\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  computing_core\
  load_activation\
  load_weight\
  load_weight_ctrl\
  pipeline\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set BRAM_addr_weight [ create_bd_port -dir O -from 31 -to 0 BRAM_addr_weight ]
  set activate0_sim [ create_bd_port -dir O -from 23 -to 0 activate0_sim ]
  set activate1_sim [ create_bd_port -dir O -from 23 -to 0 activate1_sim ]
  set activate2_sim [ create_bd_port -dir O -from 23 -to 0 activate2_sim ]
  set addr_rst_0 [ create_bd_port -dir I -type rst addr_rst_0 ]
  set channel_0 [ create_bd_port -dir I -from 11 -to 0 channel_0 ]
  set channel_end_out [ create_bd_port -dir O channel_end_out ]
  set clk_0 [ create_bd_port -dir I -type clk clk_0 ]
  set_property -dict [ list \
   CONFIG.ASSOCIATED_RESET {rst_0} \
 ] $clk_0
  set en_0 [ create_bd_port -dir I en_0 ]
  set init_signal_0 [ create_bd_port -dir I init_signal_0 ]
  set out_psum0_0 [ create_bd_port -dir O -from 7 -to 0 out_psum0_0 ]
  set out_psum1_0 [ create_bd_port -dir O -from 7 -to 0 out_psum1_0 ]
  set out_psum2_0 [ create_bd_port -dir O -from 7 -to 0 out_psum2_0 ]
  set out_psum3_0 [ create_bd_port -dir O -from 7 -to 0 out_psum3_0 ]
  set out_psum_vld_0 [ create_bd_port -dir O out_psum_vld_0 ]
  set rst_0 [ create_bd_port -dir I -type rst rst_0 ]
  set start_core_sim [ create_bd_port -dir O start_core_sim ]
  set stride_0 [ create_bd_port -dir I -from 2 -to 0 stride_0 ]
  set weight0_sim [ create_bd_port -dir O -from 71 -to 0 weight0_sim ]
  set weight1_sim [ create_bd_port -dir O -from 71 -to 0 weight1_sim ]
  set weight2_sim [ create_bd_port -dir O -from 71 -to 0 weight2_sim ]
  set weight3_sim [ create_bd_port -dir O -from 71 -to 0 weight3_sim ]
  set weight_done [ create_bd_port -dir O weight_done ]
  set weight_end_0 [ create_bd_port -dir O weight_end_0 ]
  set weight_size_0 [ create_bd_port -dir I -from 31 -to 0 weight_size_0 ]
  set width_0 [ create_bd_port -dir I -from 11 -to 0 width_0 ]

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.Coe_File {../../../../program/bram_weight_init/bram_weight_init_0.coe} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {true} \
   CONFIG.Fill_Remaining_Memory_Locations {false} \
   CONFIG.Load_Init_File {true} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {true} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: blk_mem_gen_1, and set properties
  set blk_mem_gen_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.Coe_File {../../../../program/bram_weight_init/bram_weight_init_1.coe} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {true} \
   CONFIG.Load_Init_File {true} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {true} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_1

  # Create instance: blk_mem_gen_2, and set properties
  set blk_mem_gen_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_2 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.Coe_File {../../../../program/bram_weight_init/bram_weight_init_2.coe} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {true} \
   CONFIG.Load_Init_File {true} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {true} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_2

  # Create instance: blk_mem_gen_3, and set properties
  set blk_mem_gen_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_3 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.Coe_File {../../../../program/bram_weight_init/bram_weight_init_3.coe} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {true} \
   CONFIG.Load_Init_File {true} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {true} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_3

  # Create instance: blk_mem_gen_4, and set properties
  set blk_mem_gen_4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_4 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.Coe_File {../../../../program/bram_input_init/bram_input_init_0.coe} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {true} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Load_Init_File {true} \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {50} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {true} \
   CONFIG.Use_RSTB_Pin {true} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_4

  # Create instance: computing_core_0, and set properties
  set block_name computing_core
  set block_cell_name computing_core_0
  if { [catch {set computing_core_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $computing_core_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: load_activation_0, and set properties
  set block_name load_activation
  set block_cell_name load_activation_0
  if { [catch {set load_activation_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $load_activation_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: load_weight_0, and set properties
  set block_name load_weight
  set block_cell_name load_weight_0
  if { [catch {set load_weight_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $load_weight_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: load_weight_ctrl_0, and set properties
  set block_name load_weight_ctrl
  set block_cell_name load_weight_ctrl_0
  if { [catch {set load_weight_ctrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $load_weight_ctrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: pipeline_0, and set properties
  set block_name pipeline
  set block_cell_name pipeline_0
  if { [catch {set pipeline_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $pipeline_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net addr_rst_0_1 [get_bd_ports addr_rst_0] [get_bd_pins load_weight_0/addr_rst]
  connect_bd_net -net blk_mem_gen_0_douta [get_bd_pins blk_mem_gen_0/douta] [get_bd_pins load_weight_0/BRAM_0_dout]
  connect_bd_net -net blk_mem_gen_1_douta [get_bd_pins blk_mem_gen_1/douta] [get_bd_pins load_weight_0/BRAM_1_dout]
  connect_bd_net -net blk_mem_gen_2_douta [get_bd_pins blk_mem_gen_2/douta] [get_bd_pins load_weight_0/BRAM_2_dout]
  connect_bd_net -net blk_mem_gen_3_douta [get_bd_pins blk_mem_gen_3/douta] [get_bd_pins load_weight_0/BRAM_3_dout]
  connect_bd_net -net blk_mem_gen_4_douta [get_bd_pins blk_mem_gen_4/douta] [get_bd_pins load_activation_0/BRAM_0_dout]
  connect_bd_net -net blk_mem_gen_4_doutb [get_bd_pins blk_mem_gen_4/doutb] [get_bd_pins load_activation_0/BRAM_1_dout]
  connect_bd_net -net channel_0_1 [get_bd_ports channel_0] [get_bd_pins load_activation_0/channel]
  connect_bd_net -net clk_0_1 [get_bd_ports clk_0] [get_bd_pins computing_core_0/clk] [get_bd_pins load_activation_0/clk] [get_bd_pins load_weight_0/clk] [get_bd_pins load_weight_ctrl_0/clk] [get_bd_pins pipeline_0/clk]
  connect_bd_net -net computing_core_0_out_psum0 [get_bd_ports out_psum0_0] [get_bd_pins computing_core_0/out_psum0]
  connect_bd_net -net computing_core_0_out_psum1 [get_bd_ports out_psum1_0] [get_bd_pins computing_core_0/out_psum1]
  connect_bd_net -net computing_core_0_out_psum2 [get_bd_ports out_psum2_0] [get_bd_pins computing_core_0/out_psum2]
  connect_bd_net -net computing_core_0_out_psum3 [get_bd_ports out_psum3_0] [get_bd_pins computing_core_0/out_psum3]
  connect_bd_net -net computing_core_0_out_psum_vld [get_bd_ports out_psum_vld_0] [get_bd_pins computing_core_0/out_psum_vld] [get_bd_pins load_weight_ctrl_0/core_free] [get_bd_pins pipeline_0/core_end]
  connect_bd_net -net en_0_1 [get_bd_ports en_0] [get_bd_pins pipeline_0/en]
  connect_bd_net -net init_signal_0_1 [get_bd_ports init_signal_0] [get_bd_pins load_weight_ctrl_0/init] [get_bd_pins pipeline_0/init_signal]
  connect_bd_net -net load_activation_0_BRAM_0_addr [get_bd_pins blk_mem_gen_4/addra] [get_bd_pins load_activation_0/BRAM_0_addr]
  connect_bd_net -net load_activation_0_BRAM_1_addr [get_bd_pins blk_mem_gen_4/addrb] [get_bd_pins load_activation_0/BRAM_1_addr]
  connect_bd_net -net load_activation_0_BRAM_clk [get_bd_pins blk_mem_gen_4/clka] [get_bd_pins blk_mem_gen_4/clkb] [get_bd_pins load_activation_0/BRAM_clk]
  connect_bd_net -net load_activation_0_BRAM_din [get_bd_pins blk_mem_gen_4/dina] [get_bd_pins blk_mem_gen_4/dinb] [get_bd_pins load_activation_0/BRAM_din]
  connect_bd_net -net load_activation_0_BRAM_en [get_bd_pins blk_mem_gen_4/ena] [get_bd_pins blk_mem_gen_4/enb] [get_bd_pins load_activation_0/BRAM_en]
  connect_bd_net -net load_activation_0_BRAM_rst [get_bd_pins blk_mem_gen_4/rsta] [get_bd_pins blk_mem_gen_4/rstb] [get_bd_pins load_activation_0/BRAM_rst]
  connect_bd_net -net load_activation_0_BRAM_wen [get_bd_pins blk_mem_gen_4/wea] [get_bd_pins blk_mem_gen_4/web] [get_bd_pins load_activation_0/BRAM_wen]
  connect_bd_net -net load_activation_0_activate0 [get_bd_ports activate0_sim] [get_bd_pins computing_core_0/activate0] [get_bd_pins load_activation_0/activate0]
  connect_bd_net -net load_activation_0_activate1 [get_bd_ports activate1_sim] [get_bd_pins computing_core_0/activate1] [get_bd_pins load_activation_0/activate1]
  connect_bd_net -net load_activation_0_activate2 [get_bd_ports activate2_sim] [get_bd_pins computing_core_0/activate2] [get_bd_pins load_activation_0/activate2]
  connect_bd_net -net load_activation_0_channel_end [get_bd_ports channel_end_out] [get_bd_pins load_activation_0/channel_end] [get_bd_pins load_weight_ctrl_0/channel_end]
  connect_bd_net -net load_activation_0_done [get_bd_pins load_activation_0/done] [get_bd_pins pipeline_0/activate_ready]
  connect_bd_net -net load_weight_0_BRAM_0_addr [get_bd_ports BRAM_addr_weight] [get_bd_pins blk_mem_gen_0/addra] [get_bd_pins load_weight_0/BRAM_0_addr]
  connect_bd_net -net load_weight_0_BRAM_1_addr [get_bd_pins blk_mem_gen_1/addra] [get_bd_pins load_weight_0/BRAM_1_addr]
  connect_bd_net -net load_weight_0_BRAM_2_addr [get_bd_pins blk_mem_gen_3/addra] [get_bd_pins load_weight_0/BRAM_2_addr]
  connect_bd_net -net load_weight_0_BRAM_3_addr [get_bd_pins blk_mem_gen_2/addra] [get_bd_pins load_weight_0/BRAM_3_addr]
  connect_bd_net -net load_weight_0_BRAM_clk [get_bd_pins blk_mem_gen_0/clka] [get_bd_pins blk_mem_gen_1/clka] [get_bd_pins blk_mem_gen_2/clka] [get_bd_pins blk_mem_gen_3/clka] [get_bd_pins load_weight_0/BRAM_clk]
  connect_bd_net -net load_weight_0_BRAM_din [get_bd_pins blk_mem_gen_0/dina] [get_bd_pins blk_mem_gen_1/dina] [get_bd_pins blk_mem_gen_2/dina] [get_bd_pins blk_mem_gen_3/dina] [get_bd_pins load_weight_0/BRAM_din]
  connect_bd_net -net load_weight_0_BRAM_en [get_bd_pins blk_mem_gen_0/ena] [get_bd_pins blk_mem_gen_1/ena] [get_bd_pins blk_mem_gen_2/ena] [get_bd_pins blk_mem_gen_3/ena] [get_bd_pins load_weight_0/BRAM_en]
  connect_bd_net -net load_weight_0_BRAM_rst [get_bd_pins blk_mem_gen_0/rsta] [get_bd_pins blk_mem_gen_1/rsta] [get_bd_pins blk_mem_gen_2/rsta] [get_bd_pins blk_mem_gen_3/rsta] [get_bd_pins load_weight_0/BRAM_rst]
  connect_bd_net -net load_weight_0_BRAM_wen [get_bd_pins blk_mem_gen_0/wea] [get_bd_pins blk_mem_gen_1/wea] [get_bd_pins blk_mem_gen_2/wea] [get_bd_pins blk_mem_gen_3/wea] [get_bd_pins load_weight_0/BRAM_wen]
  connect_bd_net -net load_weight_0_load_end [get_bd_ports weight_done] [get_bd_pins load_weight_0/load_end] [get_bd_pins load_weight_ctrl_0/load_done]
  connect_bd_net -net load_weight_0_weight0 [get_bd_pins load_weight_0/weight0] [get_bd_pins load_weight_ctrl_0/weight0_in]
  connect_bd_net -net load_weight_0_weight1 [get_bd_pins load_weight_0/weight1] [get_bd_pins load_weight_ctrl_0/weight1_in]
  connect_bd_net -net load_weight_0_weight2 [get_bd_pins load_weight_0/weight2] [get_bd_pins load_weight_ctrl_0/weight2_in]
  connect_bd_net -net load_weight_0_weight3 [get_bd_pins load_weight_0/weight3] [get_bd_pins load_weight_ctrl_0/weight3_in]
  connect_bd_net -net load_weight_0_weight_end [get_bd_ports weight_end_0] [get_bd_pins load_weight_0/weight_end]
  connect_bd_net -net load_weight_ctrl_0_buffer_ready [get_bd_pins load_weight_ctrl_0/buffer_ready] [get_bd_pins pipeline_0/weight_ready]
  connect_bd_net -net load_weight_ctrl_0_load_start [get_bd_pins load_weight_0/load_start] [get_bd_pins load_weight_ctrl_0/load_start]
  connect_bd_net -net load_weight_ctrl_0_weight0_out [get_bd_ports weight0_sim] [get_bd_pins computing_core_0/weight0] [get_bd_pins load_weight_ctrl_0/weight0_out]
  connect_bd_net -net load_weight_ctrl_0_weight1_out [get_bd_ports weight1_sim] [get_bd_pins computing_core_0/weight1] [get_bd_pins load_weight_ctrl_0/weight1_out]
  connect_bd_net -net load_weight_ctrl_0_weight2_out [get_bd_ports weight2_sim] [get_bd_pins computing_core_0/weight2] [get_bd_pins load_weight_ctrl_0/weight2_out]
  connect_bd_net -net load_weight_ctrl_0_weight3_out [get_bd_ports weight3_sim] [get_bd_pins computing_core_0/weight3] [get_bd_pins load_weight_ctrl_0/weight3_out]
  connect_bd_net -net pipeline_0_start_core [get_bd_ports start_core_sim] [get_bd_pins computing_core_0/load_done] [get_bd_pins pipeline_0/start_core]
  connect_bd_net -net pipeline_0_start_load [get_bd_pins load_activation_0/load_start] [get_bd_pins pipeline_0/start_load]
  connect_bd_net -net rst_0_1 [get_bd_ports rst_0] [get_bd_pins computing_core_0/rst] [get_bd_pins load_activation_0/rst] [get_bd_pins load_weight_0/rst] [get_bd_pins load_weight_ctrl_0/rst] [get_bd_pins pipeline_0/rst]
  connect_bd_net -net stride_0_1 [get_bd_ports stride_0] [get_bd_pins load_activation_0/stride]
  connect_bd_net -net weight_size_0_1 [get_bd_ports weight_size_0] [get_bd_pins load_weight_0/weight_size]
  connect_bd_net -net width_0_1 [get_bd_ports width_0] [get_bd_pins load_activation_0/width]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_Convo_core()
cr_bd_Convo_core ""
set_property REGISTERED_WITH_MANAGER "1" [get_files Convo_core.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files Convo_core.bd ] 

set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z020clg400-1 -flow {Vivado Synthesis 2021} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2021" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z020clg400-1 -flow {Vivado Implementation 2021} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2021" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
